{"version":3,"sources":["components/visReactTestComponent.js","components/frontendExampleComponent.js","components/reactGraphVisExampleTest.js","App.js","reportWebVitals.js","index.js"],"names":["highlightActive","options","layout","randomSeed","nodes","fixed","x","y","shape","size","borderWidth","borderWidthSelected","font","align","bold","color","vadjust","mod","edges","width","highlight","hover","opacity","arrows","to","enabled","scaleFactor","type","middle","from","smooth","roundness","groups","Physics","background","border","Chemistry","Biology","Mathematics","English","physics","barnesHut","gravitationalConstant","centralGravity","springLength","avoidOverlap","stabilization","iterations","interaction","hoverConnectedEdges","hoverEdges","selectable","selectConnectedEdges","zoomView","dragView","elementsId","Component","src","FrontendExampleComponent","props","dataSetOptions","getNetwork","data","setState","network","on","event","objData","getObjectDataById","alert","name","state","graph","getGraphData","testGraphJSON","style","height","stateObj","this","mounted","window","addEventListener","measure","removeEventListener","length","forEach","element","node","id","label","group","undefined","seo_subject","source","target","edge","push","console","log","graphData","body","update","filter","obj","className","vis","onClick","addNode","bind","title","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20edeb0b.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport Graph from 'vis-react';\r\nimport initialGraph from '../data.json';\r\nimport testGraphJSON from '../options/testData.json';\r\nvar highlightActive = false;\r\n\r\nlet options = {\r\n  layout: {\r\n    randomSeed: 2\r\n  },\r\n  nodes: {\r\n    fixed: {\r\n      x: false,\r\n      y: false\r\n    },\r\n    shape: \"dot\",\r\n    size: 13,\r\n    borderWidth: 1.5,\r\n    borderWidthSelected: 2,\r\n    font: {\r\n      size: 15,\r\n      align: \"center\",\r\n      bold: {\r\n        color: \"#bbbdc0\",\r\n        size: 15,\r\n        vadjust: 0,\r\n        mod: \"bold\"\r\n      }\r\n    }\r\n  },\r\n  edges: {\r\n    width: 0.01,\r\n    color: {\r\n      color: \"#D3D3D3\",\r\n      highlight: \"#797979\",\r\n      hover: \"#797979\",\r\n      opacity: 1.0\r\n    },\r\n    arrows: {\r\n      to: { enabled: true, scaleFactor: 1, type: \"arrow\" },\r\n      middle: { enabled: false, scaleFactor: 1, type: \"arrow\" },\r\n      from: { enabled: true, scaleFactor: 1, type: \"arrow\" }\r\n    },\r\n    smooth: {\r\n      type: \"continuous\",\r\n      roundness: 0\r\n    }\r\n  },\r\n  groups: {\r\n    Physics: {\r\n      color: {\r\n        background: \"#ffffff\",\r\n        border: \"#acdbae\",\r\n        highlight: {\r\n          border: \"#acdbae\",\r\n          background: \"#ffffff\"\r\n        },\r\n        hover: {\r\n          border: \"#acdbae\",\r\n          background: \"#ffffff\"\r\n        }\r\n      }\r\n    },\r\n    Chemistry: {\r\n      color: {\r\n        background: \"#ffffff\",\r\n        border: \"#f3bd86\",\r\n        highlight: {\r\n          border: \"#f3bd86\",\r\n          background: \"#ffffff\"\r\n        },\r\n        hover: {\r\n          border: \"#f3bd86\",\r\n          background: \"#ffffff\"\r\n        }\r\n      }\r\n    },\r\n    Biology: {\r\n      color: {\r\n        background: \"#ffffff\",\r\n        border: \"#c89dc8\",\r\n        highlight: {\r\n          border: \"#c89dc8\",\r\n          background: \"#ffffff\"\r\n        },\r\n        hover: {\r\n          border: \"#c89dc8\",\r\n          background: \"#ffffff\"\r\n        }\r\n      }\r\n    },\r\n    Mathematics: {\r\n      color: {\r\n        background: \"#ffffff\",\r\n        border: \"#52CBEC\",\r\n        highlight: {\r\n          border: \"#52CBEC\",\r\n          background: \"#ffffff\"\r\n        },\r\n        hover: {\r\n          border: \"#52CBEC\",\r\n          background: \"#ffffff\"\r\n        }\r\n      }\r\n    },\r\n    English: {\r\n      color: {\r\n        background: \"#ffffff\",\r\n        border: \"#c2b59b\",\r\n        highlight: {\r\n          border: \"#c2b59b\",\r\n          background: \"#ffffff\"\r\n        },\r\n        hover: {\r\n          border: \"#c2b59b\",\r\n          background: \"#ffffff\"\r\n        }\r\n      }\r\n    },\r\n    \"Logical Reasoning\": {\r\n      color: {\r\n        background: \"#ffffff\",\r\n        border: \"#87a6aa\",\r\n        highlight: {\r\n          border: \"#87a6aa\",\r\n          background: \"#ffffff\"\r\n        },\r\n        hover: {\r\n          border: \"#87a6aa\",\r\n          background: \"#ffffff\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  // physics: {\r\n  //   forceAtlas2Based: {\r\n  //       gravitationalConstant: -200,\r\n  //       centralGravity: 0.05,\r\n  //       springLength: 230,\r\n  //       springConstant: 0.08,\r\n  //       avoidOverlap:9\r\n  //   },\r\n  //   solver: 'forceAtlas2Based',\r\n  //   timestep: 0.35,\r\n  //   stabilization: {enabled:true,iterations: 10}\r\n  // },\r\n  physics: {\r\n    barnesHut: {\r\n      gravitationalConstant: -30000,\r\n      centralGravity: 1,\r\n      springLength: 70,\r\n      avoidOverlap: 1\r\n    },\r\n    stabilization: { iterations: 2500 }\r\n  },\r\n  interaction: {\r\n    hover: true,\r\n    hoverConnectedEdges: true,\r\n    hoverEdges: true,\r\n    selectable: false,\r\n    selectConnectedEdges: false,\r\n    zoomView: false,\r\n    dragView: false\r\n  }\r\n};\r\n\r\nexport default class VisReactTestComponent extends Component {\r\n  setState(stateObj) {\r\n      if (this.mounted) {\r\n          super.setState(stateObj);\r\n      }\r\n  }\r\n\r\n  componentWillMount() {\r\n      this.mounted = true;\r\n  }\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.events = {\r\n          select: function(event) {\r\n              let { nodes, edges } = event;\r\n              console.log(\"Selected nodes:\");\r\n              console.log(nodes);\r\n              console.log(\"Selected edges:\");\r\n              console.log(edges);\r\n          },\r\n          hoverNode: function(event) {\r\n              this.neighbourhoodHighlight(event, this.props.searchData);\r\n          },\r\n          blurNode: function(event) {\r\n              this.neighbourhoodHighlightHide(event);\r\n          },\r\n          click: function(event) {\r\n              this.redirectToLearn(event, this.props.searchData);\r\n          }\r\n      }\r\n\r\n      let jsonData = initialGraph;\r\n\r\n      let nodes = [];\r\n      let edges = [];\r\n\r\n      if (jsonData && jsonData.length > 0) {\r\n          for (let i = 0; i < jsonData[0].relation.root_kt_node.length; i++) {\r\n              jsonData[0].relation.root_kt_node[i].color = undefined;\r\n              jsonData[0].relation.root_kt_node[i].label = jsonData[0].relation.root_kt_node[i].source;\r\n              jsonData[0].relation.root_kt_node[i].id = jsonData[0].relation.root_kt_node[i].from;\r\n              jsonData[0].relation.root_kt_node[i].group = jsonData[0].relation.root_kt_node[i].seo_subject_name;\r\n              nodes.push(jsonData[0].relation.root_kt_node[i]);\r\n          }\r\n\r\n          for (let j = 0; j < jsonData[0].relation.leading_to_links.length; j++) {\r\n              if (\r\n                jsonData[0].relation.leading_to_links[j].target.length > 20 &&\r\n                jsonData[0].relation.leading_to_links[j].target.indexOf(\"\\n\") === -1\r\n              ) {\r\n                jsonData[0].relation.leading_to_links[j].target = jsonData[0].relation.leading_to_links[j].target\r\n                  .split(\" \")\r\n                  .reduce((a, e, i) => a + e + (i % 20 === 3 ? \"\\n\" : \" \"), \" \");\r\n              }\r\n              jsonData[0].relation.leading_to_links[j].color = undefined;\r\n              jsonData[0].relation.leading_to_links[j].label = jsonData[0].relation.leading_to_links[j].target;\r\n              jsonData[0].relation.leading_to_links[j].id = jsonData[0].relation.leading_to_links[j].to;\r\n              jsonData[0].relation.leading_to_links[j].group = jsonData[0].relation.leading_to_links[j].seo_subject_name;\r\n              nodes.push(jsonData[0].relation.leading_to_links[j]);\r\n          }\r\n\r\n          for (let k = 0; k < jsonData[0].relation.derived_from_links.length; k++) {\r\n              if (\r\n                jsonData[0].relation.derived_from_links[k].source.length > 20 &&\r\n                jsonData[0].relation.derived_from_links[k].source.indexOf(\"\\n\") === -1\r\n              ) {\r\n                jsonData[0].relation.derived_from_links[k].source = jsonData[0].relation.derived_from_links[k].source\r\n                  .split(\" \")\r\n                  .reduce((a, e, i) => a + e + (i % 20 === 3 ? \"\\n\" : \" \"), \" \");\r\n              }\r\n              jsonData[0].relation.derived_from_links[k].color = undefined;\r\n              jsonData[0].relation.derived_from_links[k].label = jsonData[0].relation.derived_from_links[k].source;\r\n              jsonData[0].relation.derived_from_links[k].id = jsonData[0].relation.derived_from_links[k].from;\r\n              jsonData[0].relation.derived_from_links[k].group = jsonData[0].relation.derived_from_links[k].seo_subject_name;\r\n              nodes.push(jsonData[0].relation.derived_from_links[k]);\r\n          }\r\n\r\n          for (let i = 0; i < nodes.length; i++) {\r\n              if (nodes[i].target !== \"\" && nodes[i].to !== \"\") {\r\n                  let edgeDir = {};\r\n                  edgeDir.from = nodes[i].from;\r\n                  edgeDir.to = nodes[i].to;\r\n                  edgeDir.arrows = \"to\";\r\n                  edges.push(edgeDir);\r\n              }\r\n          }\r\n      }\r\n\r\n      let newGraph = {};\r\n      newGraph.nodes = nodes;\r\n      newGraph.edges = edges;\r\n      this.state = {\r\n          graph: newGraph,\r\n          testGraph: this.getGraphData(testGraphJSON),\r\n          testSimple: {\r\n            nodes: [\r\n              {\r\n                id: 1,\r\n                label: 'Node 1'\r\n              }, {\r\n                id: 2,\r\n                label: 'Node 2'\r\n              }\r\n            ],\r\n            edges: [\r\n              {\r\n                from: 1,\r\n                to: 2,\r\n              }\r\n            ]\r\n          },\r\n          style: { width: \"100%\", height: \"500px\" },\r\n          network: null\r\n      };\r\n      // debugger;\r\n      this.measure = this.measure.bind(this);\r\n      this.events.hoverNode = this.events.hoverNode.bind(this);\r\n      this.events.blurNode = this.events.blurNode.bind(this);\r\n      this.events.click = this.events.click.bind(this);\r\n      this.neighbourhoodHighlight = this.neighbourhoodHighlight.bind(this);\r\n      this.redirectToLearn = this.redirectToLearn.bind(this);\r\n      this.neighbourhoodHighlightHide = this.neighbourhoodHighlightHide.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n      this.mounted = true;\r\n      window.addEventListener(\"resize\", this.measure);\r\n  }\r\n    \r\n  componentWillUnmount() {\r\n    this.mounted = false;\r\n    window.removeEventListener(\"resize\", this.measure);\r\n  }\r\n\r\n  measure(data) {\r\n    console.log(\"measure\");\r\n    this.state.network.redraw();\r\n    this.state.network.fit();\r\n  }\r\n\r\n  redirectToLearn(params, searchData) {\r\n    console.log(this.state.network.getNodeAt(params.pointer.DOM));\r\n  }\r\n\r\n  neighbourhoodHighlight(params, searchData) {\r\n    let allNodes = this.state.graph.nodes;\r\n    // let cloneNodes = allNodes.map(a => {return {...a}});\r\n    let Nodes = new this.vis.DataSet(allNodes);\r\n    let cloneNodes = Nodes.get({ returnType: \"Object\" });\r\n\r\n    this.state.network.canvas.body.container.style.cursor = \"pointer\";\r\n    // this.setState({cursor});\r\n\r\n    if (params.node !== undefined) {\r\n      highlightActive = true;\r\n      let i, j;\r\n      let selectedNode = params.node;\r\n      let degrees = 1;\r\n\r\n      for (var nodeId in cloneNodes) {\r\n        cloneNodes[nodeId].color = \"rgba(200,200,200,0.5)\";\r\n        if (cloneNodes[nodeId].hiddenLabel === undefined) {\r\n          cloneNodes[nodeId].hiddenLabel = cloneNodes[nodeId].label;\r\n          cloneNodes[nodeId].label = undefined;\r\n        }\r\n      }\r\n\r\n      let connectedNodes = this.state.network.getConnectedNodes(selectedNode);\r\n      let allConnectedNodes = [];\r\n      // get the second degree nodes\r\n      for (i = 1; i < degrees; i++) {\r\n        for (j = 0; j < connectedNodes.length; j++) {\r\n          allConnectedNodes = allConnectedNodes.concat(\r\n            this.state.network.getConnectedNodes(connectedNodes[j])\r\n          );\r\n        }\r\n      }\r\n\r\n      // all second degree nodes get a different color and their label back\r\n      for (i = 0; i < allConnectedNodes.length; i++) {\r\n        cloneNodes[allConnectedNodes[i]].color = \"rgba(150,150,150,0.75)\";\r\n        if (cloneNodes[allConnectedNodes[i]].hiddenLabel !== undefined) {\r\n          cloneNodes[allConnectedNodes[i]].label =\r\n            cloneNodes[allConnectedNodes[i]].hiddenLabel;\r\n          cloneNodes[allConnectedNodes[i]].hiddenLabel = undefined;\r\n        }\r\n      }\r\n\r\n      // all first degree nodes get their own color and their label back\r\n      for (let i = 0; i < connectedNodes.length; i++) {\r\n        cloneNodes[connectedNodes[i]].color = undefined;\r\n        if (cloneNodes[connectedNodes[i]][\"hiddenLabel\"] !== undefined) {\r\n          cloneNodes[connectedNodes[i]].label =\r\n            cloneNodes[connectedNodes[i]][\"hiddenLabel\"];\r\n          const fontSize = this.state.network.body.nodes;\r\n          fontSize[connectedNodes[i]].options.font.size = 15;\r\n          cloneNodes[connectedNodes[i]][\"hiddenLabel\"] = undefined;\r\n        }\r\n      }\r\n\r\n      // the main node gets its own color and its label back.\r\n      cloneNodes[selectedNode].color = undefined;\r\n      if (cloneNodes[selectedNode][\"hiddenLabel\"] !== undefined) {\r\n        cloneNodes[selectedNode].label =\r\n          cloneNodes[selectedNode][\"hiddenLabel\"];\r\n        const fontSize = this.state.network.body.nodes;\r\n        fontSize[selectedNode].options.font.size = 15;\r\n        // this.setState({fontSize})\r\n        cloneNodes[selectedNode][\"hiddenLabel\"] = undefined;\r\n      }\r\n    } else if (highlightActive === true) {\r\n      // reset all nodes\r\n      for (let nodeId in cloneNodes) {\r\n        cloneNodes[nodeId].color = undefined;\r\n        if (cloneNodes[nodeId][\"hiddenLabel\"] !== undefined) {\r\n          cloneNodes[nodeId].label = cloneNodes[nodeId][\"hiddenLabel\"];\r\n          const fontSize = this.state.network.body.nodes;\r\n          fontSize[nodeId].options.font.size = 15;\r\n          this.setState({ fontSize });\r\n          cloneNodes[nodeId][\"hiddenLabel\"] = undefined;\r\n        }\r\n      }\r\n      highlightActive = false;\r\n    }\r\n\r\n    let updateArray = [];\r\n    for (let nodeId in cloneNodes) {\r\n      if (cloneNodes.hasOwnProperty(nodeId)) {\r\n        updateArray.push(cloneNodes[nodeId]);\r\n      }\r\n    }\r\n    if (this.mounted) {\r\n      this.setState({\r\n        graph: {\r\n          nodes: updateArray,\r\n          edges: this.state.graph.edges\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  neighbourhoodHighlightHide(params) {\r\n    let allNodes = this.state.graph.nodes;\r\n\r\n    let Nodes = new this.vis.DataSet(allNodes);\r\n    let allNodess = Nodes.get({ returnType: \"Object\" });\r\n    // let allNodess = allNodes.map(a => {return {...a}})\r\n    this.state.network.canvas.body.container.style.cursor = \"default\";\r\n\r\n    for (var nodeId in allNodess) {\r\n      allNodess[nodeId].color = \"rgba(200,200,200,0.5)\";\r\n      if (allNodess[nodeId].hiddenLabel === undefined) {\r\n        allNodess[nodeId].hiddenLabel = allNodess[nodeId].label;\r\n        allNodess[nodeId].label = undefined;\r\n      }\r\n    }\r\n\r\n    highlightActive = true;\r\n    if (highlightActive === true) {\r\n      // reset all nodes\r\n      for (var nodeIds in allNodess) {\r\n        allNodess[nodeIds].color = undefined;\r\n        if (allNodess[nodeIds].hiddenLabel !== undefined) {\r\n          allNodess[nodeIds].label = allNodess[nodeIds].hiddenLabel;\r\n          const fontSize = this.state.network.body.nodes;\r\n          fontSize[nodeIds].options.font.size = 15;\r\n          this.setState({ fontSize });\r\n          allNodess[nodeIds].hiddenLabel = undefined;\r\n        }\r\n      }\r\n      highlightActive = false;\r\n    }\r\n\r\n    var updateArray = [];\r\n    for (var nodeIde in allNodess) {\r\n      if (allNodess.hasOwnProperty(nodeIde)) {\r\n        updateArray.push(allNodess[nodeIde]);\r\n      }\r\n    }\r\n    if (this.mounted) {\r\n      this.setState({\r\n        graph: {\r\n          nodes: updateArray,\r\n          edges: this.state.graph.edges\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  getNetwork = data => {\r\n    this.setState({ network: data });\r\n    // debugger;\r\n  };\r\n\r\n  getEdges = data => {\r\n    console.log(data);\r\n    // debugger;\r\n  };\r\n\r\n  getNodes = data => {\r\n    console.log(data);\r\n    // debugger;\r\n  };\r\n\r\n  getGraphData(data) {\r\n    if (data.length < 0) {\r\n      return null;\r\n    }\r\n\r\n    // Какая-то доп инфа\r\n    let node1 = {\r\n      from: null,\r\n      id: null,\r\n      label: null,\r\n    };\r\n    let nodes = [ ];\r\n    \r\n    let edge1 = {\r\n      // arrows: null,\r\n      from: null,\r\n      to: null\r\n    }\r\n    let edges = [ ];\r\n\r\n    data.forEach(element => {\r\n      let node = {\r\n        id: element.id,\r\n        label: element.name,\r\n        type: element.type,\r\n        group: element.type,\r\n        from: element.from,\r\n        color: undefined,\r\n        seo_subject: '',\r\n        source: '',\r\n        target: '',\r\n        to: '',\r\n      }\r\n      \r\n      if (element.from) {\r\n        let edge = {\r\n          arrows: 'to',\r\n          from: element.from,\r\n          to: element.id\r\n        }\r\n\r\n        edges.push(edge);\r\n      }\r\n\r\n      nodes.push(node);\r\n    });\r\n\r\n    return {\r\n      nodes, edges\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // debugger;\r\n    return (\r\n      <Fragment>\r\n        <span>KOK</span>\r\n        <div className=\"vis-react-title\">vis react</div>\r\n        <div className=\"expample-graph\">\r\n          {/* <Graph\r\n            graph={this.state.graph}\r\n            style={this.state.style}\r\n            options={options}\r\n            getNetwork={this.getNetwork}\r\n            getEdges={this.getEdges}\r\n            getNodes={this.getNodes}\r\n            events={this.events}\r\n            vis={vis => (this.vis = vis)}\r\n          /> */}\r\n        </div>\r\n        <div className=\"my-graph\">\r\n          <Graph \r\n            graph={this.state.testGraph}\r\n            style={this.state.style}\r\n            options={options}\r\n            vis={vis => (this.vis = vis)}\r\n          />\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}","import React, { Component, Fragment } from 'react';\r\nimport Graph from 'vis-react';\r\n\r\nimport testGraphJSON from '../options/testData.json';\r\n\r\nlet elementsId = 0;\r\n\r\nlet options = {\r\n  layout: {\r\n    randomSeed: 2\r\n  },\r\n  nodes: {\r\n    fixed: {\r\n      x: false,\r\n      y: false\r\n    },\r\n    shape: \"ellipse\",\r\n    size: 45,\r\n    borderWidth: 1.5,\r\n    borderWidthSelected: 2,\r\n    font: {\r\n      size: 15,\r\n      align: \"center\",\r\n      bold: {\r\n        color: \"#bbbdc0\",\r\n        size: 15,\r\n        vadjust: 0,\r\n        mod: \"bold\"\r\n      }\r\n    }\r\n  },\r\n  edges: {\r\n    width: 0.01,\r\n    color: {\r\n      color: \"#D3D3D3\",\r\n      highlight: \"#797979\",\r\n      hover: \"#797979\",\r\n      opacity: 1.0\r\n    },\r\n    arrows: {\r\n      to: { enabled: true, scaleFactor: 1, type: \"image\", src: '../assets/arrows/arrow.png' },\r\n      middle: { enabled: false, scaleFactor: 1, type: \"arrow\" },\r\n      from: { enabled: false, scaleFactor: 1, type: \"arrow\" }\r\n    },\r\n    smooth: {\r\n      type: \"continuous\",\r\n      roundness: 0\r\n    }\r\n  },\r\n  physics: {\r\n    barnesHut: {\r\n      // gravitationalConstant: -3000, \r\n      centralGravity: 1, // Центрировать ли все узлы\r\n      springLength: 10, // Длина ребер\r\n      avoidOverlap: 1\r\n    },\r\n    stabilization: { iterations: 2500 }\r\n  },\r\n  interaction: {\r\n    hover: true,\r\n    hoverConnectedEdges: true,\r\n    hoverEdges: true,\r\n    selectable: true,\r\n    selectConnectedEdges: true,\r\n    zoomView: true,\r\n    dragView: true\r\n  }\r\n};\r\n\r\nexport default class FrontendExampleComponent extends Component {\r\n  setState(stateObj) {\r\n      if (this.mounted) {\r\n          super.setState(stateObj);\r\n      }\r\n  }\r\n\r\n  componentWillMount() {\r\n      this.mounted = true;\r\n  }\r\n\r\n  dataSetOptions = {};\r\n\r\n  constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n          graph: this.getGraphData(testGraphJSON),\r\n          style: {width: \"100%\", height: \"500px\"},\r\n          network: null\r\n      };\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n      this.mounted = true;\r\n      window.addEventListener(\"resize\", this.measure);\r\n  }\r\n    \r\n  componentWillUnmount() {\r\n    this.mounted = false;\r\n    window.removeEventListener(\"resize\", this.measure);\r\n  }\r\n\r\n  getGraphData(data) {\r\n    if (data.length < 0) {\r\n      return null;\r\n    }\r\n\r\n    let nodes = [ ];\r\n    let edges = [ ];\r\n\r\n    data.forEach(element => {\r\n      let node = {\r\n        id: element.id,\r\n        label: element.name,\r\n        type: element.type,\r\n        group: element.type,\r\n        from: element.from,\r\n        color: undefined,\r\n        seo_subject: '',\r\n        source: '',\r\n        target: '',\r\n        to: '',\r\n      }\r\n      \r\n      if (element.from) {\r\n        let edge = {\r\n          arrows: 'to',\r\n          from: element.from,\r\n          to: element.id\r\n        }\r\n\r\n        edges.push(edge);\r\n      }\r\n\r\n      nodes.push(node);\r\n\r\n      if (element.id >= elementsId) {\r\n        elementsId = element.id + 1;\r\n      }\r\n    });\r\n\r\n    return {\r\n      nodes, edges\r\n    }\r\n  }\r\n\r\n  addNode() {\r\n    testGraphJSON.push({\r\n          id: elementsId++,\r\n          name: \"ter\" + elementsId,\r\n          type: \"Frontend\",\r\n          from: 1\r\n      });\r\n      console.log('bdJSON', testGraphJSON);\r\n\r\n      let graphData = this.getGraphData(testGraphJSON);\r\n\r\n      this.state.network.body.data.nodes.update(graphData.nodes);\r\n      this.state.network.body.data.edges.update(graphData.edges);\r\n  }\r\n\r\n  getObjectDataById(id) {\r\n    return testGraphJSON.filter(obj => obj.id === id)[0];\r\n  }\r\n\r\n  getNetwork = data => {\r\n    this.setState({ network: data });\r\n\r\n    data.on('click', (event) => {\r\n      let objData = this.getObjectDataById(event.nodes[0]);\r\n      alert(`\r\n        Вы нажали на '${objData.name}'.\r\n        Он находится в типе '${objData.type}'\r\n      `);\r\n    })\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"my-graph\">\r\n          <Graph \r\n            graph={this.state.graph}\r\n            style={this.state.style}\r\n            options={options}\r\n            vis={vis => (this.vis = vis)}\r\n            getNetwork={this.getNetwork}\r\n          />\r\n        </div>\r\n        <button\r\n            onClick={this.addNode.bind(this)}\r\n        >\r\n            Добавить узел\r\n        </button>\r\n      </Fragment>\r\n    );\r\n  }\r\n}","import React, { Component, Fragment } from 'react';\r\nimport Graph from 'react-graph-vis';\r\n\r\nlet graphData = {\r\n    nodes: [\r\n        { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\r\n        { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\r\n        { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\r\n        { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\r\n        { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\r\n    ],\r\n    edges: [\r\n        { from: 1, to: 2 },\r\n        { from: 1, to: 3 },\r\n        { from: 2, to: 4 },\r\n        { from: 2, to: 5 }\r\n    ] \r\n}\r\n\r\nexport default class ReactGraphVisExampleTest extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n        graph: graphData\r\n    };\r\n    \r\n    this.options = {\r\n        layout: {\r\n            hierarchical: true\r\n        },\r\n        edges: {\r\n            color: \"#000000\"\r\n        },\r\n        height: \"500px\"\r\n    }\r\n\r\n    this.events = {\r\n        select: (event) => {\r\n            let { nodes, edges } = event;\r\n        }\r\n    }\r\n  }\r\n\r\n  addNode() {\r\n      debugger;\r\n    graphData.nodes.push(\r\n        { id: 6, label: \"EXAMPLE\", title: \"node 6 tootip text\" }\r\n    );\r\n    graphData.edges.push(\r\n        { from: 1, to: 6 },\r\n    );\r\n\r\n    this.setState({\r\n        graph: graphData\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"my-graph\">\r\n          <Graph \r\n            graph={this.state.graph}\r\n            options={this.options}\r\n          />\r\n        </div>\r\n        <button\r\n            onClick={this.addNode.bind(this)}\r\n        >\r\n            Добавить узел\r\n        </button>\r\n      </Fragment>\r\n    );\r\n  }\r\n}","import React from \"react\";\nimport VisReactTestComponent from \"./components/visReactTestComponent\";\nimport FrontendExampleComponent from \"./components/frontendExampleComponent\";\nimport ReactGraphVisExampleTest from \"./components/reactGraphVisExampleTest\";\n\nimport './App.css';\n\nfunction App() {\n  return (\n    // <VisReactTestComponent/>\n    <FrontendExampleComponent/>\n    // <ReactGraphVisExampleTest />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}